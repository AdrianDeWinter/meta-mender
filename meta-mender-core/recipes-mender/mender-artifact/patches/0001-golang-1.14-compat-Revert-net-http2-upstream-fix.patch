From 74f70dd90d323dcfb97f10a25f1546a648727de5 Mon Sep 17 00:00:00 2001
From: Lluis Campos <lluis.campos@northern.tech>
Date: Wed, 1 Feb 2023 11:31:27 +0100
Subject: [PATCH 1/4] golang 1.14 compat: Revert net/http2 upstream fix

The upstream fix introduced a dependency on `os.ErrDeadlineExceeded`,
which is supported from golang 1.15 on.

This commit reverts upstream fix:
* https://cs.opensource.google/go/x/net/+/540bb53d3b2ef1be1c9bd6bffb0281fc6c7038ca

Signed-off-by: Lluis Campos <lluis.campos@northern.tech>
---
 vendor/golang.org/x/net/http2/transport.go | 36 ++++------------------
 1 file changed, 6 insertions(+), 30 deletions(-)

diff --git a/vendor/golang.org/x/net/http2/transport.go b/vendor/golang.org/x/net/http2/transport.go
index c5d005b..e2b1d27 100644
--- a/vendor/golang.org/x/net/http2/transport.go
+++ b/vendor/golang.org/x/net/http2/transport.go
@@ -23,7 +23,6 @@ import (
 	"net/http"
 	"net/http/httptrace"
 	"net/textproto"
-	"os"
 	"sort"
 	"strconv"
 	"strings"
@@ -140,11 +139,6 @@ type Transport struct {
 	// Defaults to 15s.
 	PingTimeout time.Duration
 
-	// WriteByteTimeout is the timeout after which the connection will be
-	// closed no data can be written to it. The timeout begins when data is
-	// available to write, and is extended whenever any bytes are written.
-	WriteByteTimeout time.Duration
-
 	// CountError, if non-nil, is called on HTTP/2 transport errors.
 	// It's intended to increment a metric for monitoring, such
 	// as an expvar or Prometheus metric.
@@ -419,31 +413,17 @@ func (cs *clientStream) closeReqBodyLocked() {
 }
 
 type stickyErrWriter struct {
-	conn    net.Conn
-	timeout time.Duration
-	err     *error
+	w   io.Writer
+	err *error
 }
 
 func (sew stickyErrWriter) Write(p []byte) (n int, err error) {
 	if *sew.err != nil {
 		return 0, *sew.err
 	}
-	for {
-		if sew.timeout != 0 {
-			sew.conn.SetWriteDeadline(time.Now().Add(sew.timeout))
-		}
-		nn, err := sew.conn.Write(p[n:])
-		n += nn
-		if n < len(p) && nn > 0 && errors.Is(err, os.ErrDeadlineExceeded) {
-			// Keep extending the deadline so long as we're making progress.
-			continue
-		}
-		if sew.timeout != 0 {
-			sew.conn.SetWriteDeadline(time.Time{})
-		}
-		*sew.err = err
-		return n, err
-	}
+	n, err = sew.w.Write(p)
+	*sew.err = err
+	return
 }
 
 // noCachedConnError is the concrete type of ErrNoCachedConn, which
@@ -701,11 +681,7 @@ func (t *Transport) newClientConn(c net.Conn, singleUse bool) (*ClientConn, erro
 
 	// TODO: adjust this writer size to account for frame size +
 	// MTU + crypto/tls record padding.
-	cc.bw = bufio.NewWriter(stickyErrWriter{
-		conn:    c,
-		timeout: t.WriteByteTimeout,
-		err:     &cc.werr,
-	})
+	cc.bw = bufio.NewWriter(stickyErrWriter{c, &cc.werr})
 	cc.br = bufio.NewReader(c)
 	cc.fr = NewFramer(cc.bw, cc.br)
 	if t.CountError != nil {
-- 
2.34.1

